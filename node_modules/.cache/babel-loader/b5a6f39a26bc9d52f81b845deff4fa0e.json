{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/storage\"; //import UserExisting from \"../Components/UserExist\";\n\nvar config = {\n  apiKey: \"AIzaSyDenYqH2Fu0RtjDDWQMUBAIP0zKfmc81PU\",\n  authDomain: \"reactblog-4a2d5.firebaseapp.com\",\n  databaseURL: \"https://reactblog-4a2d5.firebaseio.com\",\n  projectId: \"reactblog-4a2d5\",\n  storageBucket: \"reactblog-4a2d5.appspot.com\",\n  messagingSenderId: \"16857453354\",\n  appId: \"1:16857453354:web:2866e09fea14e9d0\"\n};\nexport var server = firebase.initializeApp(config);\nexport var storage = firebase.storage();\nexport var database = firebase.database().ref('/posts');\nexport var currentUser;\nexport function UserAuthState(callback) {\n  var user = server.auth().currentUser; //console.log(\"in fire user = \", user);\n\n  callback(user);\n}\nvar appData;\nvar INIT_WAIT_TIME = 1000;\nvar initTimerID;\n/**\r\n * Check if the user session is available.\r\n *\r\n * @param {Function} callback\r\n */\n\nexport function checkUser(callback) {\n  var user = JSON.parse(sessionStorage.getItem(\"authUser\")); //console.log(\"user\", user);\n  // server.auth().onAuthStateChanged(user => {\n\n  if (user) {\n    //make changes\n    // console.log(\"Logged-in user is verified\");\n    // if(user.emailVerified)\n    currentUser = user;\n    callback(currentUser);\n  } else {\n    currentUser = null;\n    callback(currentUser); //  console.log(\"No logged-in user\");\n  } // });\n\n}\n/**\r\n * Login to Firebase application.\r\n *\r\n * @param {String} userid\r\n * @param {String} password\r\n * @param {Function} loginHandler\r\n */\n\nexport function login(userid, password, loginHandler) {\n  var UserEmail;\n  server.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION).then(function () {\n    server.auth().signInWithEmailAndPassword(userid, password).then(function (result) {\n      // console.log(\"result = \", result);\n      // console.log(\"result user: \", result.user);\n      if (!result.user.emailVerified) {\n        // console.log(\"email not verified\");\n        // let error1 = {};\n        // error1 = { code: \"email-not-verified\" };\n        // // logout(e => {\n        // loginHandler(false, error1);\n        // });\n        // sessionStorage.setItem(\"authUser\", JSON.stringify(result.user));\n        //sessionStorage.removeItem(\"authUser\");\n        var error1 = {};\n        error1 = {\n          code: \"email-not-verified\"\n        };\n        loginHandler(false, error1);\n      } //sessionStorage.removeItem(\"authUser\");\n      else {\n          // sessionStorage.removeItem(\"authUser\");\n          sessionStorage.setItem(\"authUser\", JSON.stringify(result.user));\n          loginHandler(true, result);\n        }\n    }).catch(function (error) {\n      // Handle Errors here.\n      // var errorCode = error.code;\n      // var errorMessage = error.message;\n      // alert(errorMessage);\n      if (!error.code) {\n        login(userid, password, loginHandler);\n      } else {\n        // console.log(\"error in catch\", error.code);\n        loginHandler(false, error);\n      }\n    });\n  }).catch(function (error) {\n    loginHandler(false, error);\n  });\n}\nexport function emailVerificationLink() {\n  server.auth().currentUser.sendEmailVerification().then(function () {\n    alert(\"An e-mail verification link has been sent to \" + server.auth().currentUser.email + \" Please verify from your email account.\");\n  }).catch(function (error) {\n    alert(\"Error! Email verification link could not be sent\");\n  });\n}\nexport function registerUser(userName, email, password, callback) {\n  server.auth().createUserWithEmailAndPassword(email, password).then(function (user) {\n    server.database().ref(\"/RegisteredData/\" + server.auth().currentUser.uid).set({\n      userName: userName,\n      emailid: email\n    });\n    server.auth().currentUser.sendEmailVerification().then(function () {\n      // Email sent.\n      alert(\"An e-mail verification link has been sent to \" + email + \". Please verify from your email account.\");\n      callback(true);\n    }).catch(function (error) {\n      // email not sent\n      alert(\"Error! Email verification link could not be sent\");\n      callback(false, error);\n    });\n  }).catch(function (error) {\n    // user not created\n    callback(false, error);\n  });\n}\nexport function forgotPassword(email, callback) {\n  server.auth().sendPasswordResetEmail(email).then(function () {\n    console.log(\" Password reset confirmation sent. Ask user to check their email\");\n    callback(true);\n  }).catch(function (error) {\n    console.log(\"Error encountered while sending password reset code\");\n    callback(false);\n  });\n}\n/**\r\n * Change password of the current logged-in user.\r\n *\r\n * @param {String} newPassword\r\n * @param {Function} callback\r\n */\n\nfunction reauthenticate(currentPassword, callback) {\n  var user = server.auth().currentUser; // console.log(\"in reauthenticate user = \", user);\n\n  if (user) {\n    var cred = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);\n    user.reauthenticateAndRetrieveDataWithCredential(cred).then(function () {\n      // console.log(\"current password authenticated\");\n      callback(true);\n    }).catch(function (error) {\n      // console.log(error);\n      callback(false, error);\n    });\n  }\n}\n\nexport function changePassword(currentPassword, newPassword, callback) {\n  reauthenticate(currentPassword, function (success, e) {\n    if (success) {\n      var user = server.auth().currentUser;\n\n      if (user) {\n        user.updatePassword(newPassword).then(function () {\n          // console.log(\"Password updated!\");\n          callback(true);\n        }).catch(function (error) {\n          console.log(error);\n          callback(false, error);\n        });\n      }\n    } else {\n      callback(false, e);\n    }\n  });\n}\n/**\r\n * Logout current user session.\r\n */\n\nexport function logout(callback) {\n  server.auth().signOut().then(function () {\n    sessionStorage.removeItem(\"authUser\");\n    callback(true);\n  });\n}\n/**\r\n * Load the data from server and start monitoring them.\r\n *\r\n * @param {Function} callback\r\n */\n\nexport function init(callback) {\n  if (currentUser) {\n    if (appData) {\n      // console.log(\"Data is available.\");\n      callback(true);\n    } else {\n      // console.log(\"No data. Starting timer.\");\n      // wait for a second to initialize the data\n      initTimerID = window.setTimeout(function () {\n        if (appData) {\n          // console.log(\"Data available.\");\n          callback(true);\n        } else {\n          // console.log(\"Still no data.\");\n          callback(false);\n        }\n\n        window.clearTimeout(initTimerID);\n        initTimerID = null;\n      }, INIT_WAIT_TIME);\n    }\n  }\n}\nexport function loadData(callback) {\n  var usersRef = server.database().ref(\"Post\"); //const user = server.auth().currentUser;\n\n  usersRef.child(currentUser.uid).on(\"value\", function (snapshot) {\n    var exists = snapshot.val() !== null; // console.log(\"fire exists = \", exists);\n\n    callback(exists);\n  });\n}","map":{"version":3,"sources":["D:\\Users\\skalokhe\\study\\ReactBlogApp\\ReactBlogApp\\src\\Server\\fire.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","server","initializeApp","storage","database","ref","currentUser","UserAuthState","callback","user","auth","appData","INIT_WAIT_TIME","initTimerID","checkUser","JSON","parse","sessionStorage","getItem","login","userid","password","loginHandler","UserEmail","setPersistence","Auth","Persistence","SESSION","then","signInWithEmailAndPassword","result","emailVerified","error1","code","setItem","stringify","catch","error","emailVerificationLink","sendEmailVerification","alert","email","registerUser","userName","createUserWithEmailAndPassword","uid","set","emailid","forgotPassword","sendPasswordResetEmail","console","log","reauthenticate","currentPassword","cred","EmailAuthProvider","credential","reauthenticateAndRetrieveDataWithCredential","changePassword","newPassword","success","e","updatePassword","logout","signOut","removeItem","init","window","setTimeout","clearTimeout","loadData","usersRef","child","on","snapshot","exists","val"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/storage\";\r\n//import UserExisting from \"../Components/UserExist\";\r\nvar config = {\r\n  apiKey: \"AIzaSyDenYqH2Fu0RtjDDWQMUBAIP0zKfmc81PU\",\r\n  authDomain: \"reactblog-4a2d5.firebaseapp.com\",\r\n  databaseURL: \"https://reactblog-4a2d5.firebaseio.com\",\r\n  projectId: \"reactblog-4a2d5\",\r\n  storageBucket: \"reactblog-4a2d5.appspot.com\",\r\n  messagingSenderId: \"16857453354\",\r\n  appId: \"1:16857453354:web:2866e09fea14e9d0\"\r\n};\r\n\r\n\r\nexport const server = firebase.initializeApp(config);\r\nexport const storage = firebase.storage();\r\nexport const database = firebase.database().ref('/posts');\r\nexport let currentUser;\r\n\r\nexport function UserAuthState(callback) {\r\n  var user = server.auth().currentUser;\r\n  //console.log(\"in fire user = \", user);\r\n  callback(user);\r\n}\r\n\r\nlet appData;\r\n\r\nconst INIT_WAIT_TIME = 1000;\r\nlet initTimerID;\r\n\r\n/**\r\n * Check if the user session is available.\r\n *\r\n * @param {Function} callback\r\n */\r\nexport function checkUser(callback) {\r\n  var user = JSON.parse(sessionStorage.getItem(\"authUser\"));\r\n  //console.log(\"user\", user);\r\n  // server.auth().onAuthStateChanged(user => {\r\n  if (user) {\r\n    //make changes\r\n\r\n    // console.log(\"Logged-in user is verified\");\r\n    // if(user.emailVerified)\r\n    currentUser = user;\r\n    callback(currentUser);\r\n  } else {\r\n    currentUser = null;\r\n    callback(currentUser);\r\n    //  console.log(\"No logged-in user\");\r\n  }\r\n  // });\r\n}\r\n\r\n/**\r\n * Login to Firebase application.\r\n *\r\n * @param {String} userid\r\n * @param {String} password\r\n * @param {Function} loginHandler\r\n */\r\nexport function login(userid, password, loginHandler) {\r\n  var UserEmail;\r\n\r\n  server\r\n    .auth()\r\n    .setPersistence(firebase.auth.Auth.Persistence.SESSION)\r\n    .then(function () {\r\n      server\r\n        .auth()\r\n        .signInWithEmailAndPassword(userid, password)\r\n        .then(function (result) {\r\n          // console.log(\"result = \", result);\r\n          // console.log(\"result user: \", result.user);\r\n          if (!result.user.emailVerified) {\r\n            // console.log(\"email not verified\");\r\n            // let error1 = {};\r\n            // error1 = { code: \"email-not-verified\" };\r\n\r\n            // // logout(e => {\r\n            // loginHandler(false, error1);\r\n            // });\r\n\r\n            // sessionStorage.setItem(\"authUser\", JSON.stringify(result.user));\r\n\r\n            //sessionStorage.removeItem(\"authUser\");\r\n            let error1 = {};\r\n            error1 = { code: \"email-not-verified\" };\r\n\r\n            loginHandler(false, error1);\r\n          }\r\n          //sessionStorage.removeItem(\"authUser\");\r\n          else {\r\n            // sessionStorage.removeItem(\"authUser\");\r\n\r\n            sessionStorage.setItem(\"authUser\", JSON.stringify(result.user));\r\n            loginHandler(true, result);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          // Handle Errors here.\r\n          // var errorCode = error.code;\r\n          // var errorMessage = error.message;\r\n          // alert(errorMessage);\r\n\r\n          if (!error.code) {\r\n            login(userid, password, loginHandler);\r\n          } else {\r\n            // console.log(\"error in catch\", error.code);\r\n            loginHandler(false, error);\r\n          }\r\n        });\r\n    })\r\n    .catch(function (error) {\r\n      loginHandler(false, error);\r\n    });\r\n}\r\n\r\nexport function emailVerificationLink() {\r\n  server\r\n    .auth()\r\n    .currentUser.sendEmailVerification()\r\n    .then(function () {\r\n      alert(\r\n        \"An e-mail verification link has been sent to \" +\r\n        server.auth().currentUser.email +\r\n        \" Please verify from your email account.\"\r\n      );\r\n    })\r\n    .catch(function (error) {\r\n      alert(\"Error! Email verification link could not be sent\");\r\n    });\r\n}\r\n\r\nexport function registerUser(userName, email, password, callback) {\r\n  server\r\n    .auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then(function (user) {\r\n      server\r\n        .database()\r\n        .ref(\"/RegisteredData/\" + server.auth().currentUser.uid)\r\n        .set({\r\n          userName: userName,\r\n          emailid: email,\r\n        });\r\n\r\n      server\r\n        .auth()\r\n        .currentUser.sendEmailVerification()\r\n        .then(function () {\r\n          // Email sent.\r\n          alert(\r\n            \"An e-mail verification link has been sent to \" +\r\n            email +\r\n            \". Please verify from your email account.\"\r\n          );\r\n          callback(true);\r\n        })\r\n        .catch(function (error) {\r\n          // email not sent\r\n          alert(\"Error! Email verification link could not be sent\");\r\n          callback(false, error);\r\n        });\r\n    })\r\n    .catch(function (error) {\r\n      // user not created\r\n      callback(false, error);\r\n    });\r\n}\r\n\r\nexport function forgotPassword(email, callback) {\r\n  server\r\n    .auth()\r\n    .sendPasswordResetEmail(email)\r\n    .then(function () {\r\n      console.log(\r\n        \" Password reset confirmation sent. Ask user to check their email\"\r\n      );\r\n      callback(true);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(\"Error encountered while sending password reset code\");\r\n      callback(false);\r\n    });\r\n}\r\n/**\r\n * Change password of the current logged-in user.\r\n *\r\n * @param {String} newPassword\r\n * @param {Function} callback\r\n */\r\n\r\nfunction reauthenticate(currentPassword, callback) {\r\n  var user = server.auth().currentUser;\r\n  // console.log(\"in reauthenticate user = \", user);\r\n  if (user) {\r\n    var cred = firebase.auth.EmailAuthProvider.credential(\r\n      user.email,\r\n      currentPassword\r\n    );\r\n\r\n    user\r\n      .reauthenticateAndRetrieveDataWithCredential(cred)\r\n      .then(() => {\r\n        // console.log(\"current password authenticated\");\r\n        callback(true);\r\n      })\r\n      .catch(error => {\r\n        // console.log(error);\r\n        callback(false, error);\r\n      });\r\n  }\r\n}\r\n\r\nexport function changePassword(currentPassword, newPassword, callback) {\r\n  reauthenticate(currentPassword, (success, e) => {\r\n    if (success) {\r\n      var user = server.auth().currentUser;\r\n      if (user) {\r\n        user\r\n          .updatePassword(newPassword)\r\n          .then(() => {\r\n            // console.log(\"Password updated!\");\r\n            callback(true);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n            callback(false, error);\r\n          });\r\n      }\r\n    } else {\r\n      callback(false, e);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Logout current user session.\r\n */\r\nexport function logout(callback) {\r\n  server\r\n    .auth()\r\n    .signOut()\r\n    .then(() => {\r\n      sessionStorage.removeItem(\"authUser\");\r\n      callback(true);\r\n    });\r\n}\r\n\r\n/**\r\n * Load the data from server and start monitoring them.\r\n *\r\n * @param {Function} callback\r\n */\r\nexport function init(callback) {\r\n  if (currentUser) {\r\n    if (appData) {\r\n      // console.log(\"Data is available.\");\r\n      callback(true);\r\n    } else {\r\n      // console.log(\"No data. Starting timer.\");\r\n      // wait for a second to initialize the data\r\n      initTimerID = window.setTimeout(() => {\r\n        if (appData) {\r\n          // console.log(\"Data available.\");\r\n          callback(true);\r\n        } else {\r\n          // console.log(\"Still no data.\");\r\n          callback(false);\r\n        }\r\n\r\n        window.clearTimeout(initTimerID);\r\n        initTimerID = null;\r\n      }, INIT_WAIT_TIME);\r\n    }\r\n  }\r\n}\r\n\r\nexport function loadData(callback) {\r\n  var usersRef = server.database().ref(\"Post\");\r\n  //const user = server.auth().currentUser;\r\n  usersRef.child(currentUser.uid).on(\"value\", snapshot => {\r\n    var exists = snapshot.val() !== null;\r\n    // console.log(\"fire exists = \", exists);\r\n    callback(exists);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}